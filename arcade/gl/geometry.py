from array import array
from typing import Tuple

from arcade.gl import BufferDescription, Context
from arcade.gl.vertex_array import Geometry


def _get_active_context() -> Context:
    ctx = Context.active
    if not ctx:
        raise RuntimeError("No context is currently activated")
    return ctx


def quad_2d_fs() -> Geometry:
    return quad_2d(size=(2.0, 2.0))


def quad_2d(
    size: Tuple[float, float] = (1.0, 1.0), pos: Tuple[float, float] = (0.0, 0.0)
) -> Geometry:
    """
    Creates 2D quad Geometry using 2 triangle strip with texture coordinates.

    :param tuple size: width and height
    :param float pos: Center position x and y
    :rtype: A :py:class:`~arcade.gl.geometry.Geometry` instance.
    """
    ctx = _get_active_context()
    width, height = size
    x_pos, y_pos = pos

    data = array(
        "f",
        [
            x_pos - width / 2.0,
            y_pos + height / 2.0,
            0.0,
            1.0,
            x_pos - width / 2.0,
            y_pos - height / 2.0,
            0.0,
            0.0,
            x_pos + width / 2.0,
            y_pos + height / 2.0,
            1.0,
            1.0,
            x_pos + width / 2.0,
            y_pos - height / 2.0,
            1.0,
            0.0,
        ],
    )

    return ctx.geometry(
        [
            BufferDescription(
                ctx.buffer(data=data),
                "2f 2f",
                ["in_vert", "in_uv"],
            )
        ],
        mode=ctx.gl.TRIANGLE_STRIP,
    )


def cube(
    size: Tuple[float, float, float] = (1.0, 1.0, 1.0),
    center: Tuple[float, float, float] = (0.0, 0.0, 0.0),
) -> Geometry:
    """Creates a cube with normals and texture coordinates.

    :param tuple size: size of the cube as a 3-component tuple
    :param tuple center: center of the cube as a 3-component tuple
    :rtype: arcade.gl.Geometry
    :returns: A cube
    """
    ctx = _get_active_context()
    width, height, depth = size
    width, height, depth = width / 2.0, height / 2.0, depth / 2.0

    pos = array(
        "f",
        [
            center[0] + width,
            center[1] - height,
            center[2] + depth,
            center[0] + width,
            center[1] + height,
            center[2] + depth,
            center[0] - width,
            center[1] - height,
            center[2] + depth,
            center[0] + width,
            center[1] + height,
            center[2] + depth,
            center[0] - width,
            center[1] + height,
            center[2] + depth,
            center[0] - width,
            center[1] - height,
            center[2] + depth,
            center[0] + width,
            center[1] - height,
            center[2] - depth,
            center[0] + width,
            center[1] + height,
            center[2] - depth,
            center[0] + width,
            center[1] - height,
            center[2] + depth,
            center[0] + width,
            center[1] + height,
            center[2] - depth,
            center[0] + width,
            center[1] + height,
            center[2] + depth,
            center[0] + width,
            center[1] - height,
            center[2] + depth,
            center[0] + width,
            center[1] - height,
            center[2] - depth,
            center[0] + width,
            center[1] - height,
            center[2] + depth,
            center[0] - width,
            center[1] - height,
            center[2] + depth,
            center[0] + width,
            center[1] - height,
            center[2] - depth,
            center[0] - width,
            center[1] - height,
            center[2] + depth,
            center[0] - width,
            center[1] - height,
            center[2] - depth,
            center[0] - width,
            center[1] - height,
            center[2] + depth,
            center[0] - width,
            center[1] + height,
            center[2] + depth,
            center[0] - width,
            center[1] + height,
            center[2] - depth,
            center[0] - width,
            center[1] - height,
            center[2] + depth,
            center[0] - width,
            center[1] + height,
            center[2] - depth,
            center[0] - width,
            center[1] - height,
            center[2] - depth,
            center[0] + width,
            center[1] + height,
            center[2] - depth,
            center[0] + width,
            center[1] - height,
            center[2] - depth,
            center[0] - width,
            center[1] - height,
            center[2] - depth,
            center[0] + width,
            center[1] + height,
            center[2] - depth,
            center[0] - width,
            center[1] - height,
            center[2] - depth,
            center[0] - width,
            center[1] + height,
            center[2] - depth,
            center[0] + width,
            center[1] + height,
            center[2] - depth,
            center[0] - width,
            center[1] + height,
            center[2] - depth,
            center[0] + width,
            center[1] + height,
            center[2] + depth,
            center[0] - width,
            center[1] + height,
            center[2] - depth,
            center[0] - width,
            center[1] + height,
            center[2] + depth,
            center[0] + width,
            center[1] + height,
            center[2] + depth,
        ],
    )

    normal = array(
        "f",
        [
            -0,
            0,
            1,
            -0,
            0,
            1,
            -0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            -1,
            -0,
            0,
            -1,
            -0,
            0,
            -1,
            -0,
            0,
            -1,
            -0,
            0,
            -1,
            -0,
            0,
            -1,
            -0,
            0,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
        ],
    )

    uv = array(
        "f",
        [
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
        ],
    )

    return ctx.geometry(
        [
            BufferDescription(ctx.buffer(data=pos), "3f", ["in_position"]),
            BufferDescription(ctx.buffer(data=normal), "3f", ["in_normal"]),
            BufferDescription(ctx.buffer(data=uv), "2f", ["in_uv"]),
        ]
    )
